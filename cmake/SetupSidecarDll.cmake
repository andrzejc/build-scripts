if(DEFINED _SetupSidecarDllIncluded)
    return()
endif()
set(_SetupSidecarDllIncluded 1)

function(get_sidecar_dll var_dir var_dll_path lib_path)
    get_filename_component(lib_name "${lib_path}" NAME)
    get_filename_component(lib_dir "${lib_path}" DIRECTORY)
    string(REGEX REPLACE "\\.[lL][iI][bB]$" ".dll" dll_name "${lib_name}")
    foreach(suff "" /bin /.. /../bin)
        if(EXISTS "${lib_dir}${suff}/${dll_name}")
            file(TO_NATIVE_PATH "${lib_dir}${suff}" dll_dir)
            set("${var_dir}" "${dll_dir}" PARENT_SCOPE)
            set("${var_dll_path}" "${lib_dir}${suff}/${dll_name}" PARENT_SCOPE)
            return()
        endif()
    endforeach()
    set("${var_dir}" "${var_dir}-NOTFOUND" PARENT_SCOPE)
    set("${var_dll_path}" "${var_dll_path}-NOTFOUND" PARENT_SCOPE)
endfunction()

function(_ssdebug msg)
    if(SetupSidecarDll_DEBUG)
        message(STATUS "${msg}")
    endif()
endfunction()

function(add_imported_library target path)
    if(WIN32)
        get_sidecar_dll(dll_dir dll_location "${path}")
        if(dll_location)
            _ssdebug("Creating shared library ${target}: ${dll_location} (imported via: ${path})")
            add_library("${target}" SHARED IMPORTED)
            set_target_properties("${target}" PROPERTIES
                IMPORTED_LOCATION "${dll_location}"
                IMPORTED_IMPLIB "${path}"
                DLL_DIRECTORIES "${dll_dir}"
                DLL_PATHS "${dll_location}"
            )
            return()
        endif()
    endif()
    add_library("${target}" UNKNOWN IMPORTED)
    set_target_properties("${target}" PROPERTIES
        IMPORTED_LOCATION "${path}"
    )
endfunction()

macro(_ssd_gather_dlls cfg)
    foreach(loc IN LISTS imp_loc)
        if(loc MATCHES "\\.[dD][lL][lL]$")
            if(cfg)
                set(loc "$<$<CONFIG:${cfg}>:${loc}>")
            endif()
            list(APPEND all_dll_paths "${loc}")
        endif()
    endforeach()
    foreach(loc IN LISTS implib_loc imp_loc)
        if(loc)
            get_sidecar_dll(dll_dir dll_path "${loc}")
            if(dll_path)
                if(cfg)
                    set(dll_dir "$<$<CONFIG:${cfg}>:${dll_dir}>")
                    set(dll_path "$<$<CONFIG:${cfg}>:${dll_path}>")
                endif()
                list(APPEND all_dll_dirs "${dll_dir}")
                list(APPEND all_dll_paths "${dll_path}")
            endif()
        endif()
    endforeach()
endmacro()

function(gather_sidecar_dlls var_dll_dirs var_dll_paths)
    if(NOT WIN32)
        return()
    endif()
    foreach(target IN LISTS ARGN)
        if(NOT TARGET "${target}")
            _ssdebug("gather_sidecar_dlls: skipping non-target ${target}")
            continue()
        endif()
        get_target_property(dll_dirs "${target}" DLL_DIRECTORIES)
        get_target_property(dll_paths "${target}" DLL_PATHS)
        get_target_property(imp_loc "${target}" IMPORTED_LOCATION)
        get_target_property(implib_loc "${target}" IMPORTED_IMPLIB)
        _ssdebug("gather_sidecar_dlls: target ${target}\n\tDLL_DIRECTORIES: ${dll_dirs}\n\tDLL_PATHS: ${dll_paths}\
\n\tIMPORTED_LOCATION: ${imp_loc}\
\n\tIMPORTED_IMPLIB: ${implib_loc}")
        set(all_dll_paths)
        set(all_dll_dirs)
        if(dll_dirs)
            list(APPEND all_dll_dirs "${dll_dirs}")
        endif()
        if(dll_paths)
            list(APPEND all_dll_paths "${dll_paths}")
        endif()
        _ssd_gather_dlls("")
        foreach(cfg IN LISTS CMAKE_BUILD_TYPE CMAKE_CONFIGURATION_TYPES)
            string(TOUPPER "${cfg}" CFG)
            get_target_property(imp_loc "${target}" "IMPORTED_LOCATION_${CFG}")
            get_target_property(implib_loc "${target}" "IMPORTED_IMPLIB_${CFG}")
            _ssd_gather_dlls("${cfg}")
        endforeach()
        if(all_dll_dirs)
            list(APPEND "${var_dll_dirs}" "${all_dll_dirs}")
            list(REMOVE_DUPLICATES "${var_dll_dirs}")
        endif()
        if(all_dll_paths)
            list(APPEND "${var_dll_paths}" "${all_dll_paths}")
            list(REMOVE_DUPLICATES "${var_dll_paths}")
        endif()
        get_target_property(iface_libs "${target}" INTERFACE_LINK_LIBRARIES)
        get_target_property(libs "${target}" LINK_LIBRARIES)
        foreach(dep IN LISTS iface_libs libs)
            if(TARGET "${dep}")
                gather_sidecar_dlls("${var_dll_dirs}" "${var_dll_paths}" "${dep}")
            endif()
        endforeach()
    endforeach()
    set("${var_dll_dirs}" "${${var_dll_dirs}}" PARENT_SCOPE)
    set("${var_dll_paths}" "${${var_dll_paths}}" PARENT_SCOPE)
endfunction()
